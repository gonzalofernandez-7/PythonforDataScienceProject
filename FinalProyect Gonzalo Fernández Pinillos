# full_project.py

# ---------------
# Install dependencies
# ---------------
!pip install yfinance pandas requests beautifulsoup4 html5lib lxml plotly

# ---------------
# Imports & Configuration
# ---------------
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio

# Use the iframe renderer for notebooks
pio.renderers.default = "iframe"


# ---------------
# Define plotting function
# ---------------

def make_graph(stock_data, revenue_data, title):
    fig = make_subplots(
        rows=2, cols=1,
        shared_xaxes=True,
        subplot_titles=("Historical Share Price", "Historical Revenue"),
        vertical_spacing=0.3
    )

    # Filter up to midâ€‘2021
    stock_slice   = stock_data  [stock_data  ['Date'] <= '2021-06-14']
    revenue_slice = revenue_data[revenue_data['Date']    <= '2021-04-30']

    # Add price trace
    fig.add_trace(
        go.Scatter(
            x=stock_slice['Date'],
            y=stock_slice['Close'],
            name="Share Price"
        ),
        row=1, col=1
    )

    # Add revenue trace
    fig.add_trace(
        go.Scatter(
            x=revenue_slice['Date'],
            y=revenue_slice['Revenue'],
            name="Revenue"
        ),
        row=2, col=1
    )

    # Axis titles
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price (US$)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue (US$ Millions)", row=2, col=1)

    # Layout
    fig.update_layout(
        title=title,
        showlegend=False,
        height=900,
        xaxis_rangeslider_visible=True
    )

    fig.show()


# ---------------
# Tesla Stock & Revenue
# ---------------

# Download stock data
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
tesla_data['Date'] = pd.to_datetime(tesla_data['Date'])

# Download revenue data
url_tesla_rev = (
    "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/"
    "IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
)
html_tesla_rev = requests.get(url_tesla_rev).text
soup_tesla_rev = BeautifulSoup(html_tesla_rev, 'html.parser')

# Parse revenue table
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup_tesla_rev.find("tbody").find_all("tr"):
    cols    = row.find_all("td")
    date    = cols[0].text.strip()
    revenue = cols[1].text.strip().replace("$", "").replace(",", "")
    tesla_revenue = pd.concat([
        tesla_revenue,
        pd.DataFrame({"Date": [date], "Revenue": [float(revenue)]})
    ], ignore_index=True)

# Convert types
tesla_revenue['Date']    = pd.to_datetime(tesla_revenue['Date'])
tesla_revenue['Revenue'] = tesla_revenue['Revenue'].astype(float)

# Plot Tesla
make_graph(tesla_data, tesla_revenue, "Tesla Stock Data")


# ---------------
# GameStop Stock & Revenue
# ---------------

# Download stock data
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)
gme_data['Date'] = pd.to_datetime(gme_data['Date'])

# Download revenue data
url_gme_rev = (
    "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/"
    "IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
)
html_gme_rev = requests.get(url_gme_rev).text
soup_gme_rev = BeautifulSoup(html_gme_rev, 'html.parser')

# Parse revenue table
gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup_gme_rev.find("tbody").find_all("tr"):
    cols    = row.find_all("td")
    date    = cols[0].text.strip()
    revenue = cols[1].text.strip().replace("$", "").replace(",", "")
    gme_revenue = pd.concat([
        gme_revenue,
        pd.DataFrame({"Date": [date], "Revenue": [float(revenue)]})
    ], ignore_index=True)

# Convert types
gme_revenue['Date']    = pd.to_datetime(gme_revenue['Date'])
gme_revenue['Revenue'] = gme_revenue['Revenue'].astype(float)

# Plot GameStop
make_graph(gme_data, gme_revenue, "GameStop Stock Data")
